width=:para alterar o tamanho da imagem
alt="": para pessoas cegas escutarem o q tem na imagem 


TAGS:
<b> </b> ou <strong> </strong>: para deixar o texto em negrito e o <strong é para dar mais enfâse na palavra
<hr: para colocar uma linha de divisão
<br: para quebrar a linha colocando a frase embaixo, quanto mais tags <br colocar, mais linha ele irá quebrar
<i: para deitar a letra
<U: vai deixar a palavra sublinhada
<small: para deixar a palavra pequena 
<del ou <strike (porém não é mais tão usada): para riscar uma palavra
<sup: para escrever números ou nome elevados, para ficar em cima
<sub: para escrever o número ou nome para ficar embaixo
<mark: para deixar o texto marcado (marca texto)
<abbr: abreviação 
<address (endereço fixo, e-mail, telefone, midia social: endereço
<cite: como se fosse uma obra (literaria, filme, livro,etc
<q: uma citação curta que uma pessoa falou
<blockquote: dar destaque em um trecho da frase
<bdo: para inverter o texto (ficar da esquerda para a direita)
<!--: para fazer um comentário no código 
<a href=""></a>: para colocar link

Caso queira que o site abra em outra página é assim:
<a href="https://google.com target="_blank">Ir para o site</a>
É NECESSÁRIO COLOCAR O TARGET
<img src""> (não tem fechamento): para colocar imagem
<table: criar tabela
<tr: você quer fazer uma linha
<th: titulo de uma coluna
<td: para colocar uma informação

Para fazer uma tabela tem que ser ex:
<table width="100%" border="1" style="text-aling: center;">

Para fazer listas
<ol: (lista ordenada,ex: 1,2,3...)
<ul = unordered list (lista desordenada)
<li = list item (item da lista)

<iframe:viabiliza a inclusão de outro documento HTML dentro do primeiro

TAGS DE FORMULÁRIO:
<form: todo formulário começa com essa tag
<input (não tem fechamento (>): algo que vai colocar um dado de entrada


CSS

Color: cor do texto
Background: fundo da tela   background-image: colocar imagem no fundo
Background-size: tamanho da imagem   background-repeat: para repetir ou não a imagem
Border: para enfeitar (colocar botões,etc)
Margin: Serve para dar um espaço 
padding: Serve para dar um espaço só que dentro da borda
Width: Largura
Height: Altura
Propriedade text: Tem vários tipos (text-align, text-decoration, text-transform)
Propriedade font: Tem vários tipos (font-family, font-size, font-style, font-weigth 
Propriedade display: Específica se ou como um elemento vai ser exibido (display-inline, display-block, display-inline-block)
Max-width: Estabelece a largura máxima de um elemento
Position: Que diz como o elemento vai se posicionar na página. Existe 5 tipos (Position Static, Position Relative, Position Fixed, Position Absolute, Position Sticky)
Overflow: Determina como o conteúdo que ultrapassou a sua div e que não é mostrado ao usuário deve ser exibido
Float: Fazer com que um elemento flutue 
Opacity: A propriedade opacity define o nível de opacidade de um elemento
Dropdown: São botões com alternância de visibilidade de listas de links e outras coisas


Especificidade CSS: É um tipo de “poder de escolha”, que ajuda os navegadores a decidir qual valor da propriedade CSS terá precedência e será aplicado aos elementos, exemplo de ordem: #id, tag.classe, .classe, tag
Regra Important (!):É utilizada na declaração do estilo substitui qualquer outra declaração feita no CSS, onde quer que esteja na lista de declaração.
Efeito Gradiente: Onde faz uma transição de uma cor para outra no mesmo elemento
Propriedades Text Shadow:É a propriedade responsável por adicionar sombra a um texto por meio do CSS
Box Shadow:É utilizada para inserir uma camada de sombra ao redor do elemento HTML
Media Queries: Nada mais é do que uma estrutura do CSS que permite aplicar estilizações especificas para uma página web de acordo com certas condições, fazendo assim com esta página possa se adequar ao layout de tela em diferentes tamanhos e tipos de mídia
Flexbox: Visa organizar os elementos de uma página HTML dentro de seus containers de forma dinâmica

JAVASCRIPT

Conhecendo as variáveis: As variáveis ​​podem ser usadas para armazenar dados em um programa, como strings, números, objetos JSON ou valores booleanos.

VAR: O var pode ser declarado sem ser inicializado e está disponível fora do seu escopo
LET:  O let pode ser declarado sem ser inicializado e não está disponível fora do seu escopo
CONST:O const não pode ser declarado sem ser inicializado e não está disponível fora do seu escopo

OPERADORES:

1)Operadores Aritméticos (matemáticos): Os operadores aritméticos são usados para realizar operações matemáticas básicas, como adição, subtração, multiplicação e divisão. Além disso, temos o operador de resto (%), exponenciação (**) e incremento/decremento (++/--), que podem ser úteis em várias situações

2)Operadores de Atribuição:  Os operadores de atribuição são usados para atribuir valores a variáveis. O operador de atribuição básico é o "=", mas também existem operadores combinados, como "+=", "-=", "*=", "/=", entre outros, que permitem atribuir e operar ao mesmo tempo

3)Operadores de Sequência: Os operadores de sequência são utilizados para executar várias expressões em sequência, onde cada expressão é avaliada e o resultado da última expressão é retornado. Isso é feito utilizando o operador vírgula (,).

Usos do Operador de Sequência
Inicialização múltipla: Inicializar múltiplas variáveis ou executar várias operações de inicialização em uma única linha.
Executar múltiplas operações: Quando você deseja executar várias operações que não dependem uma da outra em um contexto que exige uma única expressão.
Manipulação de efeitos colaterais: Em casos onde múltiplas operações que causam efeitos colaterais precisam ser realizadas sequencialmente.

4)Operadores de Comparação: O JavaScript oferece operadores que verificam igualdade de valor (`==`), igualdade estrita de valor e tipo (`===`), desigualdade de valor (`! =`), desigualdade estrita de valor e tipo (`! ==`), e comparações tradicionais como maior que, menor que, maior ou igual a, e menor ou igual a

5)Operadores Condicional (ternário: É o único operador JavaScript que possui três operandos. Este operador é frequentemente usado como um atalho para a instrução if. Fonte. O JavaScript possui um único operador ternário, que é o operador condicional

6)Operadores Lógico: Os operadores lógicos são elementos fundamentais da linguagem de programação JavaScript. Eles permitem realizar operações de comparação e combinação de valores booleanos, ou seja, valores que podem ser verdadeiros (true) ou falsos (false). EXEMPLOS:

1. Operador AND (&&):
Este operador retorna verdadeiro se ambos os operandos forem verdadeiros. Caso contrário, ele retorna falso. Por exemplo, se tivermos duas expressões, A e B, A && B será verdadeiro somente se ambas as expressões forem verdadeira

2. Operador OR (||):
Este operador retorna verdadeiro se pelo menos um dos operandos for verdadeiro. Se ambos os operandos forem falsos, então o resultado será falso. Por exemplo, se tivermos duas expressões, A e B, A || B será verdadeiro se pelo menos uma das expressões for verdadeira.

3. Operador NOT (!):
Este operador inverte o valor de um operando booleano. Se um operando for verdadeiro, o operador NOT o tornará falso e vice-versa. Por exemplo, se tivermos uma expressão A, !A será verdadeiro se A for falso.

Principais Operadores Lógicos em JavaScript:
Operador AND (&&):
O operador AND é usado para realizar duas ou mais verificações simultâneas.
Se todas as verificações forem verdadeiras, o resultado será verdadeiro. Caso contrário, será falso.
Exemplo: if (idade >= 18 && possuiCarteiraDeMotorista === true) {}

Operador OR (||):
O operador OR é usado para realizar uma escolha entre duas ou mais condições.
Se pelo menos uma das condições for verdadeira, o resultado será verdadeiro. Somente se todas as condições forem falsas, o resultado será falso.
Exemplo: if (tipo === “admin” || tipo === “superadmin”) {}

Operador NOT (!):
O operador NOT é usado para inverter o valor booleano de uma expressão.
Se a expressão for verdadeira, o resultado será falso. Se a expressão for falsa, o resultado será verdadeiro.
Exemplo: if (!isLoggedIn) {}


























